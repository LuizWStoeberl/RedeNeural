import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.metrics import accuracy_score, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

from models import Treinamento, db

def get_ultimo_treinamento():
    return Treinamento.query.order_by(Treinamento.id.desc()).first()

def treinar_cnn():
    base_dir = "base"
    train_dir = os.path.join(base_dir, "training_set")
    test_dir = os.path.join(base_dir, "test_set")

    if not os.path.exists(train_dir) or not os.path.exists(test_dir):
        raise Exception("Diretórios de treino/teste não encontrados.")

    gerador_treinamento = ImageDataGenerator(rescale=1./255,
                                             rotation_range=7,
                                             horizontal_flip=True,
                                             zoom_range=0.2)

    base_treinamento = gerador_treinamento.flow_from_directory(
        train_dir,
        target_size=(64, 64),
        batch_size=8,
        class_mode='categorical'
    )

    gerador_teste = ImageDataGenerator(rescale=1./255)
    base_teste = gerador_teste.flow_from_directory(
        test_dir,
        target_size=(64, 64),
        batch_size=8,
        class_mode='categorical',
        shuffle=False
    )

    config = get_ultimo_treinamento()
    if not config:
        raise Exception("Nenhuma configuração de treinamento encontrada no banco de dados")

    epocas = config.epocas
    neuronios = config.neuronios
    enlaces = config.enlaces

    modelo = Sequential()
    modelo.add(Conv2D(32, (3, 3), input_shape=(64, 64, 3), activation='relu'))
    modelo.add(MaxPooling2D(pool_size=(2, 2)))

    modelo.add(Conv2D(32, (3, 3), activation='relu'))
    modelo.add(MaxPooling2D(pool_size=(2, 2)))

    modelo.add(Flatten())

    for _ in range(enlaces):
        modelo.add(Dense(units=neuronios, activation='relu'))

    num_classes = base_treinamento.num_classes
    modelo.add(Dense(units=num_classes, activation='softmax'))

    modelo.compile(optimizer='adam',
                   loss='categorical_crossentropy',
                   metrics=['accuracy'])

    modelo.fit(base_treinamento, epochs=epocas, validation_data=base_teste)

    previsoes = modelo.predict(base_teste)
    previsoes_final = np.argmax(previsoes, axis=1)
    reais = base_teste.classes

    acc = accuracy_score(reais, previsoes_final)
    cm = confusion_matrix(reais, previsoes_final)

    config.resultado = f"CNN Accuracy: {acc:.4f}"
    db.session.commit()

    return acc, cm
